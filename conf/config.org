#+TITLE: My Emacs Configuration
#+AUTHOR: Samuel Nilsson
#+EMAIL: samuel@samuelnilsson.net
#+OPTIONS: num:nil

* UI

Font and theme configuration is in early-init.

** Disable unused ui elements

#+begin_src emacs-lisp
(menu-bar-mode -1)               ; Disable the menu bar
(tool-bar-mode -1)               ; Disable toolbar
(scroll-bar-mode -1)             ; Disable visible scrollbar
(set-fringe-mode 10)             ; Give some breathing room
(setq inhibit-startup-message t) ; Disable the startup message
#+end_src

** Ring bell

Disable the ring bell.

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

** Spacing
Increase the line spacing for some breathing room.

#+begin_src emacs-lisp
(setq-default line-spacing 3)
#+end_src

** Modeline

Enable doom modeline.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src

** Icons

Enable nerd font icons

#+begin_src emacs-lisp
  (use-package nerd-icons
    :custom
    (nerd-icons-font-family "Iosevka Nerd Font"))

  (use-package nerd-icons-dired
    :hook
    (dired-mode . nerd-icons-dired-mode))

  (use-package nerd-icons-completion
    :after marginalia
    :config
    (nerd-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

  (use-package nerd-icons-ibuffer
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

* Keybindings

** Evil
Enable vi-like keybindings by using evil mode.

#+begin_src emacs-lisp
(setq evil-want-keybinding nil) ; required by evil-collection
(require 'evil)
(evil-mode 1)
#+end_src

Enable evil for more modes by enabling modes from evil-collection.

#+begin_src emacs-lisp
(use-package evil-collection
  :custom (evil-collection-setup-magit t)
  :init (evil-collection-init))
#+end_src

** Hint key bindings

Enable which-key to see the possible keybindings following the currently entered incomplete command.

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode))
#+end_src

** Spacemacs-like menus

Use general.el to define space as the global prefix key.

#+begin_src emacs-lisp
  (require 'general)
  (general-create-definer global-definer
    :keymaps 'override
    :states '(insert emacs normal hybrid motion visual operator)
    :prefix "SPC"
    :non-normal-prefix "S-SPC")
#+end_src

Macro for creating nested global shortcut menus, taken from [[https://gist.github.com/progfolio/1c96a67fcec7584b31507ef664de36cc#nested-menus][Spacemacs-like menus using general.el]].

#+begin_src emacs-lisp
  (defmacro +general-global-menu! (name infix-key &rest body)
   (declare (indent 2))
    `(progn
       (general-create-definer ,(intern (concat "+general-global-" name))
         :wrapping global-definer
         :prefix-map (quote ,(intern (concat "+general-global-" name "-map")))
         :infix ,infix-key
         :wk-full-keys nil
         "" '(:ignore t :which-key ,name))
       (,(intern (concat "+general-global-" name))
        ,@body)))
#+end_src

*** Window management

#+begin_src emacs-lisp
  (+general-global-menu! "window" "w"
        "r" 'split-window-right
        "v" 'split-window-vertically
        "s" '((lambda () (interactive) (ace-window nil)) :which-key "switch-window"))
#+end_src

*** Org

#+begin_src emacs-lisp
  (+general-global-menu! "org" "o"
        "a" 'org-agenda
        "s" 'consult-org-agenda)
#+end_src

*** Git

#+begin_src emacs-lisp
  (+general-global-menu! "git" "g"
        "s" 'magit-status
        "P" 'magit-push
        "p" 'magit-pull)
#+end_src

* Navigation

** Switch window

Use ace-window package to switch window with fewer keystrokes and in a more predictable way

#+begin_src emacs-lisp
(use-package ace-window
  :bind
  (("M-p" . 'ace-window)))
#+end_src

Activate ace-window even if only two windows, in order to always be able to use "[[https://github.com/abo-abo/ace-window#change-the-action-midway][action midway]]"

#+begin_src emacs-lisp
  :init
  (setq aw-dispatch-always t)
#+end_src

* Completion

** Text Completion

Use company package for auto completion of text in buffers.

#+begin_src emacs-lisp
(use-package company
  :config
 (add-hook 'after-init-hook 'global-company-mode))
#+end_src

** Minibuffer UI

Use vertico plugin as minibuffer completion UI

#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode))

(use-package savehist
  :init
  (savehist-mode))
#+end_src

** Annotations

Add completion annotations from marginalia package

#+begin_src emacs-lisp
(use-package marginalia
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  :init
  (marginalia-mode))
#+end_src

** Fuzzy

Enable matching of space separated patterns using orderless

#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src


** Actions
Use embark plugin to enable actions/commands in buffers based on what's near point.

#+begin_src emacs-lisp
  (use-package embark
    :bind
    (("C-." . embark-act)
     ("C-;" . embark-dwim)
     ("C-h B" . embark-bindings))

    :init

    (setq prefix-help-command #'embark-prefix-help-command)
    :config

    ; hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Search and navigation

Enable consult plugin for search anv navigation

#+begin_src emacs-lisp
(use-package consult
  :bind (; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)
         ("C-x b" . consult-buffer)
         ("C-x 4 b" . consult-buffer-other-window)
         ("C-x 5 b" . consult-buffer-other-frame)
         ("C-x t b" . consult-buffer-other-tab)
         ("C-x r b" . consult-bookmark)
         ("C-x p b" . consult-project-buffer)
         ; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)
         ("C-M-#" . consult-register)
         ; Other custom bindings
         ("M-y" . consult-yank-pop)
         ; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)
         ("M-g g" . consult-goto-line)
         ("M-g M-g" . consult-goto-line)
         ("M-g o" . consult-outline)
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ; M-s bindings in `search-map'
         ("M-s d" . consult-find)
         ("M-s c" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)
         ("M-s e" . consult-isearch-history)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)
         ("M-r" . consult-history))

  :init
  ; Configure the register formatting. This improves the register
  ; preview for `consult-register', `consult-register-load',
  ; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ; Tweak the register preview window.
  ; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  :config

  ; Configure preview. The default value
  ; is 'any, such that any key triggers the preview.
  ; (setq consult-preview-key 'any)
  ; (setq consult-preview-key "M-.")
  ; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ; For some commands and buffer sources it is useful to configure the
  ; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   :preview-key '(:debounce 0.4 any))

  (setq consult-narrow-key "<")
)
#+end_src

* Org

** Agenda/GTD

Define org files.

#+begin_src emacs-lisp
(setq org-gtd-agenda-files (list "inbox.org" "gtd.org" "tickler.org" "someday.org"))
#+end_src

Set the org directory and which org files to include in the agenda.

#+begin_src emacs-lisp
(setq org-directory "~/wiki/" org-agenda-files (push "workcal.org" org-gtd-agenda-files))
#+end_src

Set custom todo keywords.

#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
#+end_src

Setup refile targets.

#+begin_src emacs-lisp
  (setq org-refile-use-outline-path 'file) ; show full path which also allows refile to file instead of only headings
  (setq org-outline-path-complete-in-steps nil) ; generate all possible completions at once to not have to step through completions
  (setq org-refile-allow-creating-parent-nodes 'confirm) ; allow creating nodes on-the-fly
  (setq org-refile-targets
    '((nil :maxlevel . 3) ; maxlevel of headers in current file
    (org-gtd-agenda-files :maxlevel . 3))) ; maxlevel of headers in refile targets
#+end_src

** Capture

Capture buffer format and which file to capture to

#+begin_src emacs-lisp

(setq org-capture-templates
      '(("t" "Todo" entry
         (file "~/wiki/inbox.org")
       	"* TODO %?\n  %i\n  %a")))
#+end_src

** Roam

Configure roam package, used for knowledge management.

#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory (file-truename "~/wiki/roam"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n g" . org-roam-graph)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n c" . org-roam-capture)
	   ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag))) ; Add more information to vertical completion
    (org-roam-db-autosync-mode)
    (require 'org-roam-protocol))
#+end_src

** Autosave

Autosave org buffers to avoid syncthing conflicts.

#+begin_src emacs-lisp
(add-hook 'auto-save-hook 'org-save-all-org-buffers)
#+end_src

** Editor
Display bullets instead of asterisks in headers.

#+begin_src emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src
* Editor
** Syntax
Enable treesitter syntax.

#+begin_src emacs-lisp
(use-package tree-sitter
  :hook
  ((csharp-mode) . tree-sitter-mode-enable)
  ((nix-mode) . tree-sitter-mode-enable)
  :preface
  (defun tree-sitter-mode-enable ()
    (tree-sitter-mode t))
  :defer t)

(use-package tree-sitter-langs
  :hook
  (tree-sitter-after-on . tree-sitter-hl-mode))
#+end_src
* Languages

** Lsp

Enable lsp-mode for programming language features.

#+begin_src emacs-lisp
  (defun csharp-lsp ()
    (setq lsp-csharp-server-path (executable-find "OmniSharp"))
    (lsp))

  (use-package lsp-mode
    :init
      (setq lsp-keymap-prefix "C-c l")
    :hook
      (csharp-mode . csharp-lsp)
    :commands lsp)

  (use-package lsp-ui :commands lsp-ui-mode)
#+end_src

** Nix
#+begin_src emacs-lisp
(use-package nix-mode
 :mode "\\.nix\\'")
#+end_src

* Other
** Revert buffer automatically

Automatically revert a buffer when the underlying file changes on disk.

#+begin_src emacs-lisp
(global-auto-revert-mode 1)
#+end_src

** Git
*** Magit
Enable magit.

#+begin_src emacs-lisp
(require 'magit)
#+end_src

** Direnv

Add direnv support to load per-directory/project environment per buffer by enabling envrc package.

#+begin_src emacs-lisp
(use-package envrc
  :hook (after-init . envrc-global-mode))
#+end_src
