#+TITLE: My Emacs Configuration
#+AUTHOR: Samuel Nilsson
#+EMAIL: samuel@samuelnilsson.net
#+OPTIONS: num:nil

* Early

Configuration that needs to be loaded early.

#+begin_src emacs-lisp
(setq user-emacs-directory "~/.config/emacs")
#+end_src

** Littering

Use the no-littering package to store backup files and other emacs generated files in a common directory.

#+begin_src emacs-lisp
(require 'no-littering)
#+end_src

* UI

Font and theme configuration is in early-init.

** Disable unused ui elements

#+begin_src emacs-lisp
(menu-bar-mode -1)               ; Disable the menu bar
(tool-bar-mode -1)               ; Disable toolbar
(scroll-bar-mode -1)             ; Disable visible scrollbar
(set-fringe-mode 10)             ; Give some breathing room
(setq inhibit-startup-message t) ; Disable the startup message
#+end_src

** Ring bell

Disable the ring bell.

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

** Spacing

Increase the line spacing for some breathing room.

#+begin_src emacs-lisp
(setq-default line-spacing 3)
#+end_src

** Modeline

Enable doom modeline.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src

** Icons

Enable nerd font icons

#+begin_src emacs-lisp
  (use-package nerd-icons
    :custom
    (nerd-icons-font-family "Iosevka Nerd Font"))

  (use-package nerd-icons-dired
    :hook
    (dired-mode . nerd-icons-dired-mode))

  (use-package nerd-icons-completion
    :after marginalia
    :config
    (nerd-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

  (use-package nerd-icons-ibuffer
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

  (use-package nerd-icons-corfu
    :hook
    (corfu-mode . (lambda () (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))))
#+end_src

* Keybindings

** Evil
Enable vi-like keybindings by using evil mode.

#+begin_src emacs-lisp
  (setq evil-want-keybinding nil) ; required by evil-collection
  (require 'evil)
  (evil-mode 1)

  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil))
#+end_src

Enable evil for more modes by enabling modes from evil-collection.

#+begin_src emacs-lisp
  (use-package evil-collection
    :custom
      (evil-collection-setup-minibuffer t)
    :init (evil-collection-init))
#+end_src

** Hint key bindings

Enable which-key to see the possible keybindings following the currently entered incomplete command.

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode))
#+end_src

** Spacemacs-like menus

Use general.el to define space as the global prefix key.

#+begin_src emacs-lisp
  (require 'general)
  (general-create-definer global-definer
    :keymaps 'override
    :states '(insert emacs normal hybrid motion visual operator)
    :prefix "SPC"
    :non-normal-prefix "S-SPC")
#+end_src

Macro for creating nested global shortcut menus, taken from [[https://gist.github.com/progfolio/1c96a67fcec7584b31507ef664de36cc#nested-menus][Spacemacs-like menus using general.el]].

#+begin_src emacs-lisp
  (defmacro +general-global-menu! (name infix-key &rest body)
   (declare (indent 2))
    `(progn
       (general-create-definer ,(intern (concat "+general-global-" name))
         :wrapping global-definer
         :prefix-map (quote ,(intern (concat "+general-global-" name "-map")))
         :infix ,infix-key
         :wk-full-keys nil
         "" '(:ignore t :which-key ,name))
       (,(intern (concat "+general-global-" name))
        ,@body)))
#+end_src

*** General

#+begin_src emacs-lisp
    (defun ctrl-c-ctrl-c () (interactive) (call-interactively (key-binding (kbd "C-c C-c"))))

    (global-definer
          "RET" 'ctrl-c-ctrl-c)
#+end_src

*** Window management

#+begin_src emacs-lisp
  (global-definer
        "DEL" '((lambda () (interactive) (ace-window nil)) :which-key "switch-window"))

  (+general-global-menu! "window" "w"
        "b" 'split-window-right
        "v" 'split-window-vertically
        "x" 'delete-window)
#+end_src

*** Org

#+begin_src emacs-lisp
  (+general-global-menu! "org" "o"
        "aI" 'org-clock-in
        "aJ" 'org-clock-goto
        "aL" 'org-clock-in-last
        "aO" 'org-clock-out
        "aX" 'org-clock-cancel
        "aa" 'org-agenda
        "ad" 'org-deadline
        "af" 'consult-org-agenda
        "as" 'org-schedule
        "at" 'org-todo
        "a$" 'org-archive-subtree
        "c" 'org-capture
        "e" 'org-edit-special
        "h" 'consult-org-heading
        "rc" 'org-roam-capture
        "ri" 'org-roam-node-insert
        "rs" 'org-roam-node-find
        "t" 'org-timestamp
  	"vv" 'verb-mode
  	"vr" 'verb-send-request-on-point-other-window-stay)
#+end_src

*** Git

#+begin_src emacs-lisp
  (+general-global-menu! "git" "g"
        "s" 'magit-status
        "p" 'magit-push
        "F" 'magit-pull)
#+end_src

*** Syntax

#+begin_src emacs-lisp
  (+general-global-menu! "syntax" "f"
        "s" 'consult-flycheck
        "n" 'flycheck-next-error
        "p" 'flycheck-previous-error)
#+end_src

*** Navigation

#+begin_src emacs-lisp
  (global-definer
        "SPC" 'avy-goto-char)
    
  (+general-global-menu! "navigation" "n"
        "l" 'avy-goto-line
        "w" 'avy-goto-word)
#+end_src

*** Find/Search

#+begin_src emacs-lisp
  (+general-global-menu! "search" "s"
        "l" 'consult-line
        "L" 'consult-line-multi
        "f" 'consult-find
        "g" 'consult-ripgrep
	"d" 'dirvish)
#+end_src

*** Project

#+begin_src emacs-lisp
    (+general-global-menu! "project" "p"
          "p" 'project-switch-project
          "f" 'project-find-file
  	"d" 'project-dired)
#+end_src

*** Lsp

#+begin_src emacs-lisp
    (+general-global-menu! "lsp" "l"
	"r" 'xref-find-references
	"d" 'xref-find-definitions
	"n" 'eglot-rename
	"h" 'eldoc
	"c" 'eglot-code-actions)
#+end_src

*** Embark

#+begin_src emacs-lisp
  (+general-global-menu! "embark" "e"
	"b" 'embark-bindings)
#+end_src

*** Buffer

#+begin_src emacs-lisp
  (+general-global-menu! "buffer" "b"
	"b" 'consult-buffer
	"s" 'save-buffer)
#+end_src

* Navigation

** Switch window

Use ace-window package to switch window with fewer keystrokes and in a more predictable way

#+begin_src emacs-lisp
(use-package ace-window)
#+end_src

Activate ace-window even if only two windows, in order to always be able to use "[[https://github.com/abo-abo/ace-window#change-the-action-midway][action midway]]"

#+begin_src emacs-lisp
  :init
  (setq aw-dispatch-always t)
#+end_src

* Completion

** Text Completion

Setup corfu as completion ui and cape for completion backends.

*** Default backends

Define backends to always be used. When mode specific backends are added these will also be used as lowest priority.

- *dabbrev*: Complete word from current buffers.
- *file*: Completion of file system paths.

#+begin_src emacs-lisp :tangle yes
  (defun completion-default-backends ()
    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    (add-hook 'completion-at-point-functions #'cape-file)
  )
#+end_src

*** Org mode backends

- *elisp-block*: Completion in elisp org blocks.

#+begin_src emacs-lisp :tangle yes
  (defun completion-org-mode-backends ()
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  )
#+end_src

*** Prog mode backends

- *keyword*: Keywords in the current programming language syntax.

#+begin_src emacs-lisp :tangle yes
  (defun completion-prog-mode-backends ()
    (add-to-list 'completion-at-point-functions #'cape-keyword)
  )
#+end_src

*** Config

Open and close completion popup automatically.

#+begin_src emacs-lisp :tangle yes
  (defun completion-config ()
    (setq corfu-auto t
  	corfu-quit-no-match 'separator))
#+end_src

*** Use-package

#+begin_src emacs-lisp :tangle yes
  (use-package corfu
    :init
    (global-corfu-mode)
    :config
    (completion-config))

  (use-package cape
    :bind ("M-p" . cape-prefix-map)
    :hook (prog-mode . completion-prog-mode-backends)
  	(org-mode . completion-org-mode-backends)
    :init
    (completion-default-backends))
#+end_src

** Minibuffer UI

Use vertico plugin as minibuffer completion UI

#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode))

(use-package savehist
  :init
  (savehist-mode))
#+end_src

** Annotations

Add completion annotations from marginalia package

#+begin_src emacs-lisp
(use-package marginalia
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  :init
  (marginalia-mode))
#+end_src

** Fuzzy

Enable matching of space separated patterns using orderless

#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Actions
Use embark plugin to enable actions/commands in buffers based on what's near point.

#+begin_src emacs-lisp
  (use-package embark
    :bind
    (("C-." . embark-act)
     ("C-;" . embark-dwim))

    :init

    (setq prefix-help-command #'embark-prefix-help-command)
    :config

    ; hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Search and navigation

Enable consult plugin for search and navigation

#+begin_src emacs-lisp
(use-package consult
  :init
  ; Configure the register formatting. This improves the register
  ; preview for `consult-register', `consult-register-load',
  ; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ; Tweak the register preview window.
  ; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  :config

  ; Configure preview. The default value
  ; is 'any, such that any key triggers the preview.
  ; (setq consult-preview-key 'any)
  ; (setq consult-preview-key "M-.")
  ; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ; For some commands and buffer sources it is useful to configure the
  ; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   :preview-key '(:debounce 0.4 any))

  (setq consult-narrow-key "<")
)
#+end_src

** Snippets

#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (setq yas-snippet-dirs '(yasnippet-snippets-dir))
    (yas-reload-all)
    (yas-global-mode t))

  (use-package yasnippet-snippets)
#+end_src

* Org

** Agenda/GTD

Define org files.

#+begin_src emacs-lisp
(setq org-gtd-agenda-files (list "inbox.org" "gtd.org" "tickler.org" "someday.org"))
#+end_src

Set the org directory and which org files to include in the agenda.

#+begin_src emacs-lisp
(setq org-directory "~/wiki/" org-agenda-files (push "workcal.org" org-gtd-agenda-files))
#+end_src

Set custom todo keywords.

#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "IN PROGRESS(i)" "WAIT(w)" "|" "DONE(d)" "CANCELLED(c)")))
#+end_src

Setup refile targets.

#+begin_src emacs-lisp
  (setq org-refile-use-outline-path 'file) ; show full path which also allows refile to file instead of only headings
  (setq org-outline-path-complete-in-steps nil) ; generate all possible completions at once to not have to step through completions
  (setq org-refile-allow-creating-parent-nodes 'confirm) ; allow creating nodes on-the-fly
  (setq org-refile-targets
    '((nil :maxlevel . 3) ; maxlevel of headers in current file
    (org-gtd-agenda-files :maxlevel . 3))) ; maxlevel of headers in refile targets
#+end_src

** Capture

Capture buffer format and which file to capture to

#+begin_src emacs-lisp

(setq org-capture-templates
      '(("t" "Todo" entry
         (file "~/wiki/inbox.org")
       	"* TODO %?\n  %i\n  %a")))
#+end_src

** Roam

Configure roam package, used for knowledge management.

#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory (file-truename "~/wiki/roam"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n g" . org-roam-graph)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n c" . org-roam-capture)
	   ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag))) ; Add more information to vertical completion
    (org-roam-db-autosync-mode)
    (require 'org-roam-protocol))
#+end_src

Make org-store-link use id's.

#+begin_src emacs-lisp
  (setq org-id-link-to-org-use-id t)
#+end_src

** Autosave

Autosave org buffers to avoid syncthing conflicts.

#+begin_src emacs-lisp
(add-hook 'auto-save-hook 'org-save-all-org-buffers)
#+end_src

** Editor

Use "modern style" for org entities.

#+begin_src emacs-lisp
  (use-package org-modern
    :hook (org-mode . org-modern-mode)
             (org-agenda-finalize . org-modern-agenda)
    :config (setq org-modern-table nil)
            (setq org-modern-tag nil)
            (setq org-modern-todo nil)
            (setq org-modern-timestamp nil))
#+end_src

Use utf-8 characters for org entities.

#+begin_src emacs-lisp
  (setq org-pretty-entities t)
#+end_src

Make font-lock hide emphasis markers.

#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src

** Rest client

Use verb as a rest client for testing out api:s.

- *verb-auto-kill-response-buffers*: Have only one response buffer at the same time by killing old ones automatically
- *network-stream-use-client-certificates*: Use certificates defined in .netrc

#+begin_src emacs-lisp :tangle yes
(use-package verb
    :hook
    (verb-mode . (lambda () (setq-local network-stream-use-client-certificates t)))
    :config
    (setq verb-auto-kill-response-buffers t))
#+end_src

* Editor

** Syntax

Enable treesitter syntax.

#+begin_src emacs-lisp
  (use-package treesit-auto
    :config
    (global-treesit-auto-mode))
#+end_src

Fontify more items.

#+begin_src emacs-lisp
  (setq treesit-font-lock-level 4)
#+end_src

Set directory to load treesitter grammars from.

#+begin_src  emacs-lisp
  (setq treesit-extra-load-path (list (getenv "TREESIT_LIB")))
#+end_src

** Line numbers

Enable line numbers when programming.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

* Syntax checking

Enable syntax checking with flycheck globally.

#+begin_src emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))
#+end_src

* Languages

** Nix

#+begin_src emacs-lisp
  (use-package nix-ts-mode
   :mode "\\.nix\\'")

  (add-hook 'nix-ts-mode-hook 'eglot-ensure)
  (with-eval-after-load 'eglot
  (dolist (mode '((nix-ts-mode . ("nil" :initializationOptions
                                     (:formatting (:command [ "nixfmt" ]))))))
    (add-to-list 'eglot-server-programs mode)))
#+end_src


** C#

#+begin_src emacs-lisp
 (add-hook 'csharp-ts-mode-hook 'eglot-ensure)
 (with-eval-after-load 'eglot
   (add-to-list 'eglot-server-programs
               '(csharp-ts-mode . ("OmniSharp" "-lsp"))))
#+end_src

** Protobuf

#+begin_src emacs-lisp :tangle yes
  (use-package protobuf-ts-mode)
#+end_src

* Other

** Revert buffer automatically

Automatically revert a buffer when the underlying file changes on disk.

#+begin_src emacs-lisp
(global-auto-revert-mode 1)
#+end_src

** Git
*** Magit
Enable magit.

#+begin_src emacs-lisp
(require 'magit)
#+end_src

** Direnv

Add direnv support to load per-directory/project environment per buffer by enabling envrc package.

#+begin_src emacs-lisp
(use-package envrc
  :hook (after-init . envrc-global-mode))
#+end_src

** File browser

Use dirvish instead of dired.

#+begin_src emacs-lisp
(use-package dirvish
  :init (dirvish-override-dired-mode))
#+end_src

** Pdf

Use pdf-tools to view pdf files.

#+begin_src emacs-lisp
(use-package pdf-tools
  :mode ("\\.pdf$" . pdf-view-mode)
  :config
    (pdf-tools-install :no-query))
#+end_src

** Graphs

Use mermaid mode for graphs/diagrams.

#+begin_src emacs-lisp
(use-package ob-mermaid
 :init (org-babel-do-load-languages
    'org-babel-load-languages
    '((mermaid . t)
      (scheme . t)
      ))
    )
#+end_src

#+begin_src emacs-lisp
(use-package mermaid-mode)
#+end_src emacs-lisp

** Tramp

Make tramp find all executables on remote nixOS systems.

#+begin_src emacs-lisp
  (use-package tramp
    :config (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
#+end_src

** Music

Use emms to play music.

- *emms-player-list*: Use mpv for playback
- *emms-info-functions*: Function used to retrieve metadata from media files
- *emms-source-file-default-directory:* Default directory for music

#+begin_src emacs-lisp :tangle yes
  (use-package emms-info-libtag)
  (use-package emms
    :config
    (emms-all)
    (setq emms-player-list '(emms-player-mpv)
  	emms-info-functions '(emms-info-libtag)
          emms-source-file-default-directory "~/music/"))
#+end_src

** Password manager

Use pass to manage password store.

#+begin_src emacs-lisp :tangle yes
  (use-package pass
    :requires password-store
    :custom
    (password-store-executable (executable-find "pass"))
    (password-store-dir (getenv "PASSWORD_STORE_DIR")))
#+end_src
