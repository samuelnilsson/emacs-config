#+TITLE: My Emacs Configuration
#+AUTHOR: Samuel Nilsson
#+EMAIL: samuel@samuelnilsson.net
#+OPTIONS: num:nil

* UI

Disable the startup message.

#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src

Only eval UI related configuration when creating a frame.

#+begin_src emacs-lisp
(defun new-frame-setup (frame)
  (when (display-graphic-p frame)
#+end_src

** Disable unused ui elements

#+begin_src emacs-lisp
(menu-bar-mode -1)    ; Disable the menu bar
(tool-bar-mode -1)    ; Disable toolbar
(scroll-bar-mode -1)  ; Disable visible scrollbar
(set-fringe-mode 10)  ; Give some breathing room
#+end_src

** Ring bell

Disable the ring bell.

#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

** Font

*** Set the font

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Iosevka Nerd Font" :height @fontSize@)
  (set-face-attribute 'fixed-pitch nil :font "Iosevka Nerd Font" :height @fontSize@)
  (set-face-attribute 'variable-pitch nil :font "Iosevka Aile" :height @fontSize@)

  (defun set-buffer-variable-pitch ()
    (interactive)
    (variable-pitch-mode t)
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-link nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-date nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-special-keyword nil :inherit 'fixed-pitch))

  (add-hook 'org-mode-hook 'set-buffer-variable-pitch)
#+end_src

*** Ligatures

Ligatures are enabled using the ligature.el package, since support is not built into emacs.

#+begin_src emacs-lisp
(use-package ligature
  :config
  (ligature-set-ligatures 'prog-mode '("<---" "<--"  "<<-" "<-" "->" "-->" "--->" "<->" "<-->" "<--->" "<---->" "<!--"
                                       "<==" "<===" "<=" "=>" "=>>" "==>" "===>" ">=" "<=>" "<==>" "<===>" "<====>" "<!---"
                                       "<~~" "<~" "~>" "~~>" "::" ":::" "==" "!=" "===" "!=="
                                       ":=" ":-" ":+" "<*" "<*>" "*>" "<|" "<|>" "|>" "+:" "-:" "=:" "<******>" "++" "+++"))
  (global-ligature-mode t))
#+end_src

** Theme

Set the catppuccin macchiato theme to not burn my eyes.

#+begin_src emacs-lisp
(load-theme 'catppuccin :no-confirm)
(setq catppuccin-flavor 'macchiato)
(catppuccin-reload)
#+end_src

** Opacity
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha . 98))
#+end_src

** Spacing
Increase the line spacing for some breathing room.

#+begin_src emacs-lisp
(setq-default line-spacing 3) 
#+end_src

** Eval UI on new frame

Eval new-frame-setup function on existing frames and when new frames are created.

#+begin_src emacs-lisp
))
(mapc 'new-frame-setup (frame-list))
(add-hook 'after-make-frame-functions 'new-frame-setup)
#+end_src

* Keybindings

Enable vi-like keybindings by using evil mode.

#+begin_src emacs-lisp
(require 'evil)
(evil-mode 1)
#+end_src

* Completion

** UI

Use vertico plugin as completion UI

#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode))

(use-package savehist
  :init
  (savehist-mode))
#+end_src

** Annotations

Add completion annotations from marginalia package

#+begin_src emacs-lisp
(use-package marginalia
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  :init
  (marginalia-mode))
#+end_src

** Fuzzy

Enable matching of space separated patterns using orderless

#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src


** Actions
Use embark plugin to enable actions/commands in buffers based on what's near point.

#+begin_src emacs-lisp
  (use-package embark
    :bind
    (("M-." . embark-act)
     ("M-;" . embark-dwim)
     ("C-h B" . embark-bindings))

    :init

    (setq prefix-help-command #'embark-prefix-help-command)
    :config

    ; hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none)))))
#+end_src

* Org

** Agenda

Set the org directory and which org files to include in the agenda.

#+begin_src emacs-lisp
(setq org-directory "~/wiki/" org-agenda-files (list "inbox.org" "gtd.org" "tickler.org" "workcal.org" "someday.org"))
#+end_src

Set custom todo keywords.

#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "WAITING" "|" "DONE" "CANCELLED")))
#+end_src

** Roam

Configure roam package, used for knowledge management.

#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory (file-truename "~/wiki/roam"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n g" . org-roam-graph)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n c" . org-roam-capture)
	   ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag))) ; Add more information to vertical completion
    (org-roam-db-autosync-mode)
    (require 'org-roam-protocol))
#+end_src

** Autosave

Autosave org buffers to avoid syncthing conflicts.

#+begin_src emacs-lisp
(add-hook 'auto-save-hook 'org-save-all-org-buffers)
#+end_src

* Other
** Revert buffer automatically

Automatically revert a buffer when the underlying file changes on disk.

#+begin_src emacs-lisp
(global-auto-revert-mode 1)
#+end_src
